// HennovelTranslations plugin for LNReader
// Updated: improved selectors, headers, and episode-aware logic for /episodes/ pages.

const BASE_DOMAINS = [
  'https://hennoveltranslations.com',
  'https://hennoveltranslations.org',
];

const DEFAULT_HEADERS = {
  'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117 Safari/537.36',
  'Accept-Language': 'en-US,en;q=0.9',
};

const PLUGIN = {
  id: 'hennoveltranslations',
  name: 'HennovelTranslations',
  version: '1.1.0',
  author: 'Generated by assistant',
  website: 'https://hennoveltranslations.com',
  language: 'english',
  icon: 'https://via.placeholder.com/128',
  description: 'Source plugin for HennovelTranslations (episode-aware for /episodes/ pages).',

  async fetchText(url, opts = {}) {
    const headers = Object.assign({}, DEFAULT_HEADERS, opts.headers || {});
    const res = await fetch(url, { method: 'GET', headers, redirect: 'follow' });
    if (!res.ok) throw new Error(`HTTP ${res.status} ${res.statusText} when fetching ${url}`);
    return await res.text();
  },

  parseDOM(html) {
    return new DOMParser().parseFromString(html, 'text/html');
  },

  async resolveBase() {
    for (const d of BASE_DOMAINS) {
      try {
        const resp = await fetch(d, { method: 'HEAD' });
        if (resp.ok) return d;
      } catch (e) {
        // try next
      }
    }
    return BASE_DOMAINS[0];
  },

  // Popular and latest use site's home/fallbacks
  async popularNovels(page = 1) {
    const base = await this.resolveBase();
    const url = `${base}/page/${page}/`;
    const html = await this.fetchText(url);
    const doc = this.parseDOM(html);
    const items = Array.from(doc.querySelectorAll('article, .novel-item, .project, .post'));
    return items.map(el => {
      const a = el.querySelector('a[href]');
      if (!a) return null;
      const title = (el.querySelector('h2, h3, .title, .entry-title') || a).textContent.trim();
      const href = new URL(a.getAttribute('href'), url).toString();
      const img = el.querySelector('img');
      const cover = img ? new URL(img.getAttribute('src'), url).toString() : null;
      return { title, url: href, cover };
    }).filter(Boolean);
  },

  async searchNovels(query, page = 1) {
    const base = await this.resolveBase();
    const sea
